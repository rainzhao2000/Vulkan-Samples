#version 450
/* Copyright (c) 2019-2020, Sascha Willems
 *
 * SPDX-License-Identifier: Apache-2.0
 *
 * Licensed under the Apache License, Version 2.0 the "License";
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

struct Particle
{
	vec4 pos;
	vec4 vel;
};

// Binding 0 : Position storage buffer
layout(std140, binding = 0) buffer Pos 
{
   Particle particles[ ];
};

layout (binding = 1) uniform UBO 
{
	float deltaT;
	int particleCount;
} ubo;

layout (constant_id = 1) const int SHARED_DATA_SIZE = 1024;
layout (constant_id = 2) const float GRAVITY = 0.002;
layout (constant_id = 3) const float POWER = 0.75;
layout (constant_id = 4) const float SOFTEN = 0.05;

layout (local_size_x_id = 0) in;

// Share data between computer shader invocations to speed up caluclations
shared vec4 sharedData[SHARED_DATA_SIZE];

#define TIME_FACTOR 0.05

float rbf(float u, float s, float x, int p) {
	float ans = 1.0;
	for (int i = 0; i < p; ++i) {
		ans *= (x - u) / s;
	}
	return exp(-ans);
}

float rescale(float x) {
	return (exp(x) - 1.0) / 11.2;
}

float r(float x) {
	return rescale(2.5 * rbf(630.0, 60.0, x, 4));
}

float g(float x) {
	return rescale(2.5 * rbf(530.0, 60.0, x, 4) + 0.7 * rbf(380.0, 30.0, x, 2));
}

float b(float x) {
	return rescale(2.5 * rbf(420.0, 70.0, x, 4));
}

void main() 
{
	// Current SSBO index
	uint index = gl_GlobalInvocationID.x;
	if (index >= ubo.particleCount) 
		return;
	vec4 vel = particles[index].vel; // vel is initial positions
	if (index < 60) {
		particles[index].pos = vel;
	} else {
		particles[index].pos = vec4(r(vel.x), g(vel.x), b(vel.x), vel.w);
	}
}